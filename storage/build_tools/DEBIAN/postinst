#!/bin/bash

# Create Required Folders for Liman
mkdir -p /liman/{server,certs,logs,sandbox,keys,extension}

# environment creation
if [ -f "/liman/server/.env" ]; then
    echo "Upgrading liman."
else
    cp /liman/server/.env.example /liman/server/.env
    php /liman/server/artisan key:generate
    echo "Installing liman."
fi

# User Creation
if getent passwd liman > /dev/null 2>&1; then
    echo "Liman User Found."
else
    useradd liman -m
    mkdir /home/liman
    chmod -R o= /liman /home/liman
    chown -R liman:liman /liman /home/liman
    echo "Liman User Created"
fi

# Delete if sudo exists
sed -i '/liman/d' /etc/sudoers

runuser liman -c '$(which gpg) --batch --yes --delete-keys aciklab@havelsan.com.tr'
runuser liman -c '$(which gpg) --import /liman/server/storage/aciklab.public'

# Certificate Creation
if [ -f "/liman/certs/liman.crt" ]; then
    echo "SSL Certificate Found."
else
    openssl req \
        -new \
        -newkey rsa:4096 \
        -days 365 \
        -nodes \
        -x509 \
        -subj "/C=TR/ST=Ankara/L=Merkez/O=Havelsan/CN=liman" \
        -keyout /liman/certs/liman.key \
        -out /liman/certs/liman.crt
    echo "SSL Certificate Created"
fi

DB_EXISTS=$(sudo -u liman psql -lqt | cut -d \| -f 1 | grep "liman" >/dev/null 2>/dev/null && echo "1" || echo "0")

# Database Creation
if [ $DB_EXISTS == "0" ]; then
    # .env dosyasında DB_PASSWORD kontrolü
    if ! grep -q "DB_PASSWORD=" /liman/server/.env || [ -z "$(grep "DB_PASSWORD=" /liman/server/.env | sed 's/DB_PASSWORD=//')" ]; then
        # DB_PASSWORD boşsa veya yoksa yeni bir şifre oluştur
        sudo -u postgres createuser liman
        sudo -u postgres createdb liman -O liman
        RANDOM_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 25 ; echo)
        sudo -u postgres psql -U postgres -d postgres -c "alter user \"liman\" with password '$RANDOM_PASSWORD';"
        sed -i '/DB_PASSWORD/d' /liman/server/.env
        printf "\nDB_PASSWORD=$RANDOM_PASSWORD\n" | tee -a /liman/server/.env
    fi
else
    echo "Postgresql already set up."
fi

# Update Php and Fpm to run as liman user.
sed -i "s/www-data/liman/g" /etc/php/8.4/fpm/pool.d/www.conf
sed -i "s/www-data/liman/g" /etc/nginx/nginx.conf

# Crontab Setting
if [ -f "/etc/cron.d/liman" ]; then
    echo "Crontab already created.";
else
    mkdir "/etc/cron.d" 2>/dev/null
    echo "* * * * * liman cd /liman/server && php artisan schedule:run >> /dev/null 2>&1" >> "/etc/cron.d/liman"
    systemctl restart cron
fi

mv /liman/server/storage/nginx.conf /etc/nginx/sites-available/liman.conf
ln -s /etc/nginx/sites-available/liman.conf /etc/nginx/sites-enabled/liman.conf

# Nginx Auto Redirection
if grep --quiet LIMAN_SECURITY_OPTIMIZATIONS /etc/nginx/sites-available/default; then
    echo "Nginx https redirection already set up."; 
else
    echo """
#LIMAN_SECURITY_OPTIMIZATIONS
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    server_tokens off;
    more_set_headers 'Server: LIMAN MYS';
    return 301 https://\$host\$request_uri;
}
    """ > /etc/nginx/sites-available/default
fi

#Supervisor Configuration
echo """
#LIMAN_OPTIMIZATIONS
[program:liman-high_availability_syncer]
process_name=%(program_name)s_%(process_num)02d
command=php /liman/server/artisan queue:work --sleep=1 --tries=1 --queue=high_availability_syncer --timeout=0
autostart=true
autorestart=true
user=liman
numprocs=1
redirect_stderr=true
stdout_logfile=/liman/logs/high_availability.log
    """ > /etc/supervisor/conf.d/liman-high_availability_syncer.conf

echo """
#LIMAN_OPTIMIZATIONS
[program:liman-system-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /liman/server/artisan queue:work --sleep=1 --tries=3 --queue=system_updater --timeout=0
autostart=true
autorestart=true
user=liman
numprocs=1
redirect_stderr=true
stdout_logfile=/liman/logs/system_update.log
    """ > /etc/supervisor/conf.d/liman-system-worker.conf

supervisorctl reread
supervisorctl update
supervisorctl start all

#Increase Php-Fpm Memory
sed -i "s/memory_limit = 128M/memory_limit = 1024M/g" /etc/php/8.4/fpm/php.ini

#Change Queue Driver from Db to Redis
sed -i "s#QUEUE_DRIVER=database#QUEUE_DRIVER=redis#g" /liman/server/.env

#Change Render Engine Port
sed -i "s#RENDER_ENGINE_ADDRESS=https://127.0.0.1:5454#RENDER_ENGINE_ADDRESS=https://127.0.0.1:2806#g" /liman/server/.env

# JWT Secret creation
JWT_EXISTS=$(grep JWT_SECRET /liman/server/.env && echo "1" || echo "0")
if [ $JWT_EXISTS == "0" ]; then
    php /liman/server/artisan jwt:secret
else
    echo "JWT secret already set."
fi

# Run Database Migration
php /liman/server/artisan migrate --force
php /liman/server/artisan cache:clear
php /liman/server/artisan view:clear
php /liman/server/artisan config:clear

# Delete Old Sandbox Files
rm -rf /liman/sandbox/{.git,vendor,views,.gitignore,composer.json,composer.lock,index.php}

# Set Permissions
chown -R liman:liman /liman/{server,certs,sandbox,logs,hashes}
chmod 700 -R /liman/{server,certs,hashes}
chmod 750 -R /liman/logs
chmod 755 -R /liman/sandbox
chown liman:liman /{liman,liman/extensions,liman/keys}
chmod 755 /{liman,liman/extensions,liman/keys}
usermod -aG liman syslog

# Create UI Systemd Service
if [ -f "/etc/systemd/system/liman-ui.service" ]; then
    echo "Liman User Interface Service Already Added.";
    ENVIRONMENT_SET=$(cat /etc/systemd/system/liman-ui.service | grep Environment >/dev/null && echo 1 || echo 0)
    if [ $ENVIRONMENT_SET == "1" ]; then
        sed -i '/Environment="HOSTNAME=127.0.0.1"/d' /etc/systemd/system/liman-ui.service
    fi
else
    echo """
[Unit]
Description=Liman User Interface Service
After=network.target
StartLimitIntervalSec=0
[Service]
Type=simple
Restart=always
RestartSec=1
User=liman
WorkingDirectory=/liman/ui
ExecStart=/usr/bin/node server.js

[Install]
WantedBy=multi-user.target
    """ > /etc/systemd/system/liman-ui.service
fi

# Create Systemd Service
if [ -f "/etc/systemd/system/liman-system.service" ]; then
    echo "Liman System Service Already Added.";
else
    echo """
[Unit]
Description=Liman System Service & Extension Renderer
After=network.target
StartLimitIntervalSec=0
[Service]
Type=simple
Restart=always
RestartSec=1
User=root
ExecStart=/liman/server/storage/liman_system

[Install]
WantedBy=multi-user.target
    """ > /etc/systemd/system/liman-system.service
fi

# Create Systemd Service
if [ -f "/etc/systemd/system/liman-render.service" ]; then
    echo "Liman Render Service Already Added.";
else
    echo """
[Unit]
Description=Liman System Service & Extension Renderer
After=network.target
StartLimitIntervalSec=0
[Service]
Type=simple
Restart=always
RestartSec=1
User=root
ExecStart=/liman/server/storage/liman_render

[Install]
WantedBy=multi-user.target
    """ > /etc/systemd/system/liman-render.service
fi

# Create Socket Service
if [ -f "/etc/systemd/system/liman-socket.service" ]; then
    echo "Liman Socket Service Already Added.";
else
        echo """
[Unit]
Description=Liman Socket Service
After=network.target
StartLimitIntervalSec=0
[Service]
Type=simple
Restart=always
RestartSec=1
User=liman
ExecStart=/usr/bin/php /liman/server/artisan websockets:serve --host=127.0.0.1

[Install]
WantedBy=multi-user.target
    """ > /etc/systemd/system/liman-socket.service
fi

sed -i "s/upload_max_filesize.*/upload_max_filesize = 100M/g" /etc/php/8.4/fpm/php.ini
sed -i "s/post_max_size.*/post_max_size = 100M/g" /etc/php/8.4/fpm/php.ini

mv -f /liman/server/storage/php8.4-fpm-www.conf /etc/php/8.4/fpm/pool.d/www.conf

# Reload the systemd
systemctl daemon-reload

# Remove Legacy Service.
rm /etc/systemd/system/liman.service 2>/dev/null
systemctl disable liman 2>/dev/null
systemctl stop liman 2>/dev/null

systemctl enable liman-ui 2>/dev/null
systemctl enable liman-system 2>/dev/null
systemctl enable liman-render 2>/dev/null
systemctl disable liman-connector 2>/dev/null
systemctl disable liman-webssh 2>/dev/null
systemctl disable liman-vnc 2>/dev/null
systemctl enable liman-socket 2>/dev/null
systemctl enable nginx 2>/dev/null
systemctl stop php8.1-fpm 2>/dev/null
systemctl disable php8.1-fpm 2>/dev/null
systemctl enable php8.4-fpm 2>/dev/null

systemctl stop liman-connector
systemctl stop liman-vnc
systemctl stop liman-webssh
systemctl restart liman-ui
systemctl restart liman-system
systemctl restart liman-render
systemctl restart liman-socket
systemctl restart nginx
systemctl restart php8.4-fpm

# Optimize Liman
php /liman/server/artisan optimize:clear

# Liman Storage Link
php /liman/server/artisan storage:link

# Enable Liman
php /liman/server/artisan up

# Flush Redis Cache
redis-cli flushall

# Create Limanctl Symlink
chmod +x /liman/server/storage/limanctl
cp -f /liman/server/storage/limanctl /usr/bin/limanctl

#Finalize Installation
printf "\nKurulum Başarıyla Tamamlandı!\n\nYönetici Hesabı oluşturmak yada şifrenizi yenilemek için aşağıdaki komutu çalıştırabilisiniz\n\n\n"
printf "sudo limanctl administrator\n\n\nDestek için liman.havelsan.com.tr adresini ziyaret edebilirsiniz.\n"